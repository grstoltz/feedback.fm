// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../generated/type-graphql"
}

model User {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  username         String         @unique
  password         String
  avatarURL        String         @default("https://res.cloudinary.com/dedeo0s30/image/upload/v1605156898/default-profile-icon-16.png")
  songs            Song[]
  sentComments     Comment[]      @relation(name: "SentComments")
  receivedComments Comment[]      @relation(name: "ReceivedComments")
  notifications    Notification[]
  transactions     Transaction[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

}

model Song {
  id        Int       @id @default(autoincrement())
  title     String
  mediaUrl  String
  mediaType String
  genre     String
  ownerId   Int
  owner     User      @relation(fields: [ownerId], references: [id])
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id         Int       @id @default(autoincrement())
  parentId   Int
  senderId   Int
  receiverId Int
  approvalId Int?
  active     Boolean   @default(true)
  body       String
  approval   Approval? @relation(fields: [approvalId], references: [id])
  sender     User      @relation(fields: [senderId], references: [id], name: "SentComments")
  receiver   User      @relation(fields: [receiverId], references: [id], name: "ReceivedComments")
  parent     Song      @relation(fields: [parentId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Notification {
  id         Int      @id @default(autoincrement())
  receiverId Int
  body       String
  read       Boolean  @default(false)
  type       String
  url        String
  receiver   User     @relation(fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Transaction {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  openingBalance    Int
  transactionAmount Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Approval {
  id        Int       @id @default(autoincrement())
  commentId Int       @unique
  status    String
  Comment   Comment?
}
